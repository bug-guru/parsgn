ConfigFile:
    (^I* Rule)+ ^I* ^#EOF;

Rule:
    (Prefix ^I*)*
    Name
    ^I*
    (Quantifier ^I*)?
    NormalNode | CompactNode
    ExpressionList
    ^";"
    ;

NormalNode: ^":";
CompactNode: ^"=";

I: ^WhiteSpace | Comment;

WhiteSpace: ^(#WHITESPACE)+;

Comment = SingleLineComment | MultiLineComment;

SingleLineComment: ^"//" #ANY{^#EOL};

MultiLineComment: ^"/*" #ANY{^"*/"};

Name = #UNICODE_IDENTIFIER_START #UNICODE_IDENTIFIER_PART*;

Expression:
    (Silent ^I*)?
    OneOf | Reference | CharType | String | Sequence
    ^I*
    (Quantifier | Until ^I*)?;

ExpressionList: (^I* Expression)+;

Silent: ^"^";

Quantifier:
      ZeroOrOne
    | OneOrMore
    | ZeroOrMore
    | ExactlyNTimes
    | AtLeastMinTimes
    | AtLeastMinButNotMoreThanMaxTimes;

ZeroOrOne: ^"?";

OneOrMore: ^"+";

ZeroOrMore: ^"*";

Until: ^"{" ^I* Expression ^I* ^"}";

ExactlyNTimes = ^"{" ^I* Number ^I* ^"}";

AtLeastMinTimes = ^"{" ^I* Number ^I* ^"," ^I* ^"}";

AtLeastMinButNotMoreThanMaxTimes: ^"{" ^I* Min ^I* ^"," ^I* Max ^I* ^"}";

Number: #DIGIT+;

Min = Number;

Max = Number;

OneOf: Reference | CharType | String | Sequence (^I* ^"|" ^I* Reference | CharType | String | Sequence)+;

Reference: Name;

CharType = ^"#" Name; //TODO: list all possible char types

String = ^"\"" ("\\\"" | "\\\\" | #ANY){^"\""};

Sequence: ^"(" ExpressionList ^")";