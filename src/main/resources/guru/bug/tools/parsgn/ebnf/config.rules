/*
 * Copyright (c) 2015 Dimitrijs Fedotovs http://www.bug.guru
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

ConfigFile:
    [I Rule]+ I #EOF;

Rule:
    HideFlag? I Name I RuleParams? I ":" ExpressionList ";";

HideFlag: ".";

RuleParams: "(" I Name [I "," I Name]* I ")";

I: [#WHITESPACE | SingleLineComment | MultiLineComment]*;

SingleLineComment: "//" #VALID>#LINE_SEPARATOR;

MultiLineComment: "/*" #VALID>"*/" "*/";

Name: #UNICODE_IDENTIFIER_START #UNICODE_IDENTIFIER_PART*;

ExpressionList: [I Expression]+;

Expression:
    OneOf | Reference | CharType | String | Sequence
    ExpressionSuffix?;

ExpressionSuffix: I [ZeroOrOne
                   | OneOrMore
                   | ZeroOrMore
                   | ExactlyNTimes
                   | AtLeastMinTimes
                   | AtLeastMinButNotMoreThanMaxTimes
                   | Until] I;

ZeroOrOne: "?";

OneOrMore: "+";

ZeroOrMore: "*";

Until: ">" I Expression I;

ExactlyNTimes: "{" I Calculation I "}";

AtLeastMinTimes: "{" I Calculation I "," I "}";

AtLeastMinButNotMoreThanMaxTimes: "{" I Calculation I "," I Calculation I "}";

OneOf: ["[" I OneOfExpression [I "|" I OneOfExpression]+ I "]"] | [OneOfExpression [I "|" I OneOfExpression]+];

OneOfExpression:
    Reference | CharType | String | Sequence
    ExpressionSuffix?;

Reference: Name ReferenceParams?;

ReferenceParams: "(" I Calculation [I "," I Calculation]* I ")";

CharType: "#" Name; //TODO: list all possible char types

String: StringConstant [I "->" I StringConstant]?;

StringConstant: "\""
                    [   "\\\"" -> "\""
                      | "\\\\" -> "\\"
                      | "\\n" -> "\n"
                      | "\\r" -> "\r"
                      | "\\t" -> "\t"
                      | "\\f" -> "\f"
                      | "\\b" -> "\b"
                      | #VALID
                    ] > "\""
                "\"";

Sequence: "[" ExpressionList I "]";

// CALCULATION EXPRESSION

Calculation: I Term [I Operator I Term]* I;

Term: ["(" Calculation ")"] | Variable | Constant;

Constant: Integer;

Variable: Name;

Integer: #DIGIT+;

Operator: Addition | Subtraction | Multiplication | Division;

Addition: "+";

Subtraction: "-";

Multiplication: "*";

Division: "/";