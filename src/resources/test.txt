CompilationUnit: 
    repeat
        one of
            skip WhiteSpaces,
            Comment,
            Token
        until skip EOF;

WhiteSpaces: repeat WhiteSpace;

Comment: compact
    sequence
        skip sequence '/', '*'
        repeat Char until skip sequence '*', '/';


WhiteSpace: one of ' ', (sequence '\r', '\n'), '\t', '\n', '\r', '\f';

Token: compact repeat Char until skip WhiteSpace;

InputChar: one of
            convert compact sequence '\', 'u', HexDigit, HexDigit, HexDigit, HexDigit by UnicodeConverter,
            ANY

#########################################

CompilationUnit:
    repeat
        one of
            skip WhiteSpaces,
            Comment,
            Token
    until skip EOF;

Comment: one of collapse MultiLineComment, collapse LineComment;

MultiLineComment:
    compact sequence
        skip MultiLineCommentStart,
        repeat InputChar until skip MultiLineComentEnd

MultiLineCommentStart:
    string "/*" of InputChar;

MultiLineCommentEnd:
    string "*/" of InputChar;

LineComment:
    compact sequence
        skip LineCommentStart,
        repeat InputChar until skip LineTerminator;

LineCommentStart:
    one of
        string "//" of InputChar,
        InputChar = "#";

LineTerminator:
    one of
        string "\r\n" of InputChar,
        InputChar = "\n",
        InputChar = "\r";



##################################
CompilationUnit: sequence {
    optional PackageDeclaration;
    optional many ImportDeclaration;
    many TypeDeclaration;
}

PackageDeclaration: sequence {
    PackageKeyword;
    QualifiedName;
    End;
}

ImportDeclaration: sequence {
    ImportKeyword;
    QualifiedName;
    End;
}

PackageKeyword:
    InputElement[Token/Keyword/package];

PackageKeyword:
    InputElement[Token/Keyword/import];

End:
    InputElement[Token/Separator/";"];

InputElement: sequence {
    optional many Ignorable;
    Token;
}

Ignorable: one of {
    optional many WhiteSpace;
    optional many Comment;
}

Token: one of {
    Identifier;
    Keyword;
    Literal;
    Separator;
    Operator;
}

Keyword: sequence {
    one of {
        "abstract" ; "continue" ; "for"        ; "new"       ; "switch"       ;
        "assert"   ; "default"  ; "if"         ; "package"   ; "synchronized" ;
        "boolean"  ; "do"       ; "goto"       ; "private"   ; "this"         ;
        "break"    ; "double"   ; "implements" ; "protected" ; "throw"        ;
        "byte"     ; "else"     ; "import"     ; "public"    ; "throws"       ;
        "case"     ; "enum"     ; "instanceof" ; "return"    ; "transient"    ;
        "catch"    ; "extends"  ; "int"        ; "short"     ; "try"          ;
        "char"     ; "final"    ; "interface"  ; "static"    ; "void"         ;
        "class"    ; "finally"  ; "long"       ; "strictfp"  ; "volatile"     ;
        "const"    ; "float"    ; "native"     ; "super"     ; "while"        ;
    };
    terminate [^a-zA-Z0-9$_]

}
