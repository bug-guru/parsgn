ConfigFile: repeat Rule until ignore sequence Ignorable, EOF;

Rule: sequence 
        RuleName,
        RuleSeparator,
        ExpressionDefinition->setDefinition,
        RuleTerminator;

RuleName: compact Token;

Token: sequence
        optional ignore Ignorable,
        repeat InputChar until ignore reapply Separator;

Ignorable: repeat one of WhiteSpaces, Comment;

Separator: one of
            char ":;,#\"() \n\r\f\t->" of InputChar,
            EOF;

RuleSeparator: sequence
        optional ignore Ignorable,
        value ":" of InputChar;

RuleTerminator: sequence
        optional ignore Ignorable,
        value ";" of InputChar;

ExpressionSeparator: sequence
        optional ignore Ignorable,
        value "," of InputChar;

WhiteSpace: char "\n\r\t\f " of InputChar;

WhiteSpaces as String: repeat WhiteSpace;

Comment: repeat InputChar from ignore CommentStart until ignore CommentEnd;

CommentStart: value "#" of InputChar;

CommentEnd: reapply char "\n\r" of InputChar;

InputChar:
    one of
        convert value "\\\\" to "\\",
        convert value "\\\"" to "\"",
        convert value "\\n" to "\n",
        convert value "\\r" to "\r",
        convert value "\\t" to "\t",
        convert value "\\f" to "\f",
        char;

QuotationMark:
    compact char "\"" of InputChar;

StringLiteral:
    sequence
        optional ignore Ignorable,
        compact repeat InputChar 
                  from ignore QuotationMark
                 until ignore QuotationMark;

Prefix:
    set of
        value "compact" of Token,
        value "ignore" of Token,
        value "optional" of Token,
        value "reapply" of Token;

OfExpression:
    sequence
        ignore value "of" of Token,
        Expression;

ExpressionList:
    repeat Expression from Expression while ignore ExpressionSeparator;

Expression:
    one of
        CharExpression,
        ConvertExpression,
        OneOfExpression,
        RepeatExpression,
        SequenceExpression,
        SetOfExpression,
        ValueExpression,
        ReferenceExpression;

CharExpression:
    sequence
        optional Prefix,
        ignore value "char" of Token,
        optional StringLiteral,
        optional OfExpression;

ConvertExpression:
    sequence
        optional Prefix,
        ignore value "convert" of Token,
        Expression,
        ignore value "to" of Token,
        StringLiteral;

OneOfExpression:
    sequence
        optional Prefix,
        ignore value "one" of Token,
        ignore value "of" of Token,
        ExpressionList;

RepeatExpression:
    sequence
        optional Prefix,
        ignore value "repeat" of Token,
        Expression,
        optional RepeatFrom,
        optional one of RepeatUntil, RepeatWhile;

RepeatFrom:
    sequence
        ignore value "from" of Token,
        Expression;

RepeatUntil:
    sequence
        ignore value "until" of Token,
        Expression;

RepeatWhile:
    sequence
        ignore value "while" of Token,
        Expression;

SequenceExpression:
    sequence
        optional Prefix,
        ignore value "sequence" of Token,
        ExpressionList;

SetOfExpression:
    sequence
        optional Prefix,
        ignore value "set" of Token,
        ignore value "of" of Token,
        ExpressionList;

ValueExpression:
    sequence
        optional Prefix,
        ignore value "value" of Token,
        optional StringLiteral,
        optional OfExpression;

ReferenceExpression:
    sequence
        optional Prefix,
        RuleName;
