ConfigFile:
    [I Rule]+ I #EOF;

Rule:
    HideFlag? I Name I RuleParams? I ":" ExpressionList ";";

HideFlag: ".";

RuleParams: "(" I Name [I "," I Name]* I ")";

.I: [#WHITESPACE | SingleLineComment | MultiLineComment]*;

SingleLineComment: "//" #VALID>#LINE_SEPARATOR;

MultiLineComment: "/*" #VALID>"*/" "*/";

Name: #UNICODE_IDENTIFIER_START #UNICODE_IDENTIFIER_PART*;

ExpressionList: [I Expression]+;

Expression:
    OneOf | Reference | CharType | String | Sequence
    ExpressionSuffix?;

ExpressionSuffix: I [ZeroOrOne
                   | OneOrMore
                   | ZeroOrMore
                   | ExactlyNTimes
                   | AtLeastMinTimes
                   | AtLeastMinButNotMoreThanMaxTimes
                   | Until] I;

ZeroOrOne: "?";

OneOrMore: "+";

ZeroOrMore: "*";

Until: ">" I Expression I;

ExactlyNTimes: "{" I Calculation I "}";

AtLeastMinTimes: "{" I Calculation I "," I "}";

AtLeastMinButNotMoreThanMaxTimes: "{" I Calculation I "," I Calculation I "}";

OneOf: ["[" I OneOfExpression [I "|" I OneOfExpression]+ I "]"] | [OneOfExpression [I "|" I OneOfExpression]+];

OneOfExpression:
    Reference | CharType | String | Sequence
    ExpressionSuffix?;

Reference: Name ReferenceParams?;

ReferenceParams: "(" I Calculation [I "," I Calculation]* I ")";

CharType: "#" Name; //TODO: list all possible char types

String: StringConstant [I "->" I StringConstant]?;

StringConstant: "\""
                    [   "\\\"" -> "\""
                      | "\\\\" -> "\\"
                      | "\\n" -> "\n"
                      | "\\r" -> "\r"
                      | "\\t" -> "\t"
                      | "\\f" -> "\f"
                      | "\\b" -> "\b"
                      | #VALID
                    ] > "\""
                "\"";

Sequence: "[" ExpressionList I "]";

// CALCULATION EXPRESSION

Calculation: I Term [I Operator I Term]* I;

Term: ["(" Calculation ")"] | Variable | Constant;

Constant: Integer;

Variable: Name;

Integer: #DIGIT+;

Operator: Addition | Subtraction | Multiplication | Division;

Addition: "+";

Subtraction: "-";

Multiplication: "*";

Division: "/";