ConfigFile:
    [I Rule]+ I #EOF;

Rule:
    HideFlag? Name RuleParams? I ":" ExpressionList ";";

HideFlag: ".";

RuleParams: "(" I Name [I "," I Name]* I ")";

.I: [#WHITESPACE | SingleLineComment | MultiLineComment]*;

SingleLineComment: "//" #VALID>#LINE_SEPARATOR;

MultiLineComment: "/*" #VALID>"*/" "*/";

Name: #UNICODE_IDENTIFIER_START #UNICODE_IDENTIFIER_PART*;

ExpressionList: [I Expression]+;

Expression:
    OneOf | Reference | CharType | String | Sequence
    ExpressionSuffix?;

ExpressionSuffix: I [ZeroOrOne
                   | OneOrMore
                   | ZeroOrMore
                   | ExactlyNTimes
                   | AtLeastMinTimes
                   | AtLeastMinButNotMoreThanMaxTimes
                   | Until] I;

ZeroOrOne: "?";

OneOrMore: "+";

ZeroOrMore: "*";

Until: ">" I Expression I;

ExactlyNTimes: "{" I CalcExpression I "}";

AtLeastMinTimes: "{" I CalcExpression I "," I "}";

AtLeastMinButNotMoreThanMaxTimes: "{" I CalcExpression I "," I CalcExpression I "}";

OneOf: OneOfVariant1 | OneOfVariant2;

OneOfVariant1: "[" I OneOfVariant2 I "]";

OneOfVariant2: OneOfExpression [I "|" I OneOfExpression]+;

OneOfExpression:
    Reference | CharType | String | Sequence
    ExpressionSuffix?;

Reference: Name ReferenceParams?;

ReferenceParams: "(" I CalcExpression I ")";

CharType: "#" Name; //TODO: list all possible char types

String: "\"" ["\\\"" -> "\"" | "\\\\" -> "\\" | "\\n" -> "\n" | "\\r" -> "\r" | #VALID]>"\"" "\"" Transform?;

Transform: I "->" I String;

Sequence: "[" ExpressionList I "]";

// CALCULATION EXPRESSION

CalcExpression: I Term [I Operator I Term]* I;

Term: ["(" CalcExpression ")"] | Name | Constant;

Constant: Integer;

Integer: #DIGIT+;

Operator: Addition | Subtraction | Multiplication | Division;

Addition: "+";

Subtraction: "-";

Multiplication: "*";

Division: "/";